---- Current ----

Changes from v0.3.1:

- Background transitions can now be set in the project by using the 'endTransition' property on a scene. The options for this are:
    none: Instantly switches to the next scene
    fade: Fades this scene out and causes the next scene to fade in
    morph: Causes this scene to morph into the next one, the current background fades out while the new one fades in at the same time

- When playing music, the following options are now available:
    loop (true or false)
    pitch (0.1-5)
    volume (1-100)
    mute (true or false).
    They can be applied to a scene segment in the 'music' attribute object

- Made some improvements to the DataSet class so that data validation and casting can happen more easily. Deprecated old way of fetching data.
- Added a lot more error messages. There were previously instances where a novel would run incorrectly due to errors not being handled
- Errors now write to an errors.log file in the same directory as the TaleScripter executable file
- Added a graphical error handler which displays an error message in the window, this will fall back to a console error message if it can't display
- Error messages now appear on the console if they are not caught by the graphical error handler
- Fixed some database-related non-portable file paths which was causing errors on macOS and Linux.
- Project has been converted to using CMAKE for the build process to allow for easy usage with IDEs and different build environments.
- Mouse input is now working.
- Character sprites can now be displayed during the novel, they are attached to a line and will be displayed when the line's text starts.
- Read character sprite state/display information on a line and save it into the database to be used within the game
- Database tables created to store Character States and Character State groups.
- Character sprite information is now read from Characters/Characters.json and saved into the databased linked to the correct characters.
- Textures information is now read from the database and texture files are loaded into memory.
- Textures are now read from Textures/Textures.json and saved into the database by the GameCompiler.

---- v0.3.1 ----

Changes from v0.3.0:

- TaleScripter now compiles and runs on Mac OSX. This version includes the changes needed to facilitate that.
- Changed file paths to use UNIX-style characters. This allows the project to run on both Windows and UNIX-like operating systems.
- Fixed typo in header include guard
- Removed TestScreen, as it is no longer required.
- Made some other changes to resolve compiler warnings that were thrown from Clang.
