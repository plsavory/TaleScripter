Tiler is a tile rendering engine written in C++ for 2D video ganes, built with SFML in mind.



It is currently heavily under development and is extremely unfinished, this document also serves as a location for development notes and usage information.



As this is not finalized, anything to do with the file formats is currently subject to change.



Potential features list:


- Able to render tile maps from tile sets of any given size

- Support for scaling/zooming

- Support for Rotation

- Collision detection with solid tiles

- Collision map file format to be paired with tile sets for detailed collition data

- Animated tiles

- Alpha blending the tiles and the entire map

- Custom file format for storing maps and tilesets

- Ability to programatically write to tile memory (Mutate the map during gameplay)

- Smooth scrolling (Of course...)

- Multiple tile maps on one screen (Different layers)



Tiler tile map file format:



The file format for mapping is designed to be as simple as possible, to make implementation easy and fast.



The following is how the file format is laid out:



Bytes 0-15: 16-byte file header

Bytes 15+: Tile data (4, 8 or 16 bits per tile depending on size flag)



---- File header ----


The file header contains the following information:



Bytes 0-3: Unique number/text to identify this type of file

Byte 4: Number signifying the file format specification version

Byte 5: Addressing flags

Byte 6: Attribute flags (Currently unused - have some ideas what this could be used for so reserving it now)

Bytes 7 & 8: Width of the map (In tiles)

Bytes 9 & 10: Height of the map (In tiles)

Bytes 11-15: Currently unused

Addressing flags explained:


Bits 0 & 1 = The addressing mode for the tiles. 0 = 4-bit addressing, 1 = 8-bit addressing (Should be default when saving the file), 2 = 16-bit addressing.



Addressing modes:


4-bit: Allows for a combination of 16 unique tiles on the map

8-bit: Allows for a combination of 256 unique files on the map

16-bit: Allows for a combination of 32,768 unique tiles on the map



Larger addressing modes will result in larger files and more space taken up in RAM, depending on how many tiles you need on a given tile map, you should always select the smallest which you can use. If you later exceed that after originally creating the file, it is trivial to re-write the file using the file writing functions in the engine.

---- Tile data ----

Tile data is simple.

Depending on the addressing mode, tiles are simply stored sequentially as 4, 8 or 16-bit values in the file.

Which tile each piece of data in the file is defining depends on the addressing mode flag, map width and map height sections in the file header. 

Each number within the tile data is the ID of a tile within the tileset assigned to this map. The tileset files will be defined later in this document when I have gotten that far.

The size of the tiles (in pixels) will be defined within the tilset files, not within the map files.

Take the following data (Not actual tile data, I've just written random numbers in here):

00 00 CC 00 FF 00 AE 00 FE 00 00 00 00 FF AA 12 86 FF AA EE 00 00 00 00 00 00 00 00 AA CC FF 22

If the map was a 2x16 map, using the 8-bit addressing mode, the tiles will be arranged thus:

00 00 
CC 00 
FF 00 
AE 00 
FE 00 
00 00 
00 FF 
AA 12 
86 FF 
AA EE 
00 00 
00 00 
00 00 
00 00 
AA CC 
FF 22

The same data, but in 4-bit addressing mode as a 4x16 map:

0 0 0 0
C C 0 0
F F 0 0
A E 0 0
F E 0 0
0 0 0 0
0 0 F F
A A 1 2
8 6 F F
A A E E
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
A A C C
F F 2 2

Or as a 8x8 map in 4-bit addressing mode:

0 0 0 0 C C 0 0
F F 0 0 A E 0 0
F E 0 0 0 0 0 0
0 0 F F A A 1 2
8 6 F F A A E E
0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0
A A C C F F 2 2

